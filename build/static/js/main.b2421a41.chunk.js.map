{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","id","trailerurl","key","className","map","src","poster_path","backdrop_path","alt","name","onClick","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setmovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","backdropPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2421a41.chunk.js","sourcesContent":["const API_KEY = \"c8015f2cb4539b4966b539e26ca23610\";\n\nconst requests ={\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n\n}\n\nexport default requests; ","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n\n});\n\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({title, fetchUrl, isLargeRow}) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n\n    const opts = {\n        height: \"390\",\n        width: \"100%\",\n        playerVars: {\n          autoplay: 1,\n        },\n      };\n\n    useEffect(() => {\n        // if [], run once when the row loads, and dont run again\n    async function fetchData() {\n        const request = await axios.get(fetchUrl);\n        // console.log(request.data.results);\n        setMovies(request.data.results)\n        return request;\n        }\n        fetchData();\n    }, [fetchUrl]);\n\n    const handleClick = async (movie) => {\n        if (trailerUrl) {\n          setTrailerUrl(\"\");\n        } else {\n          let trailerurl = await axios.get(\n            `/movie/${movie.id}/videos?api_key=fb34530271b349314af0de263d16ab5a`\n          );\n          setTrailerUrl(trailerurl.data.results[0]?.key);\n        }\n      };\n\n\n\n    return (\n        <div className=\"row\">\n        \n            <h2>{title}</h2>\n\n            <div className='row_poster'>\n\n                {movies.map(movie => (\n                   <img \n                   key={movie.id}\n                   className= {`row_posters ${isLargeRow && \"row_postersLarge\"}`}src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name}  onClick={() => handleClick(movie)}/>\n                ))}\n\n\n\n\n            </div>\n\n\n            {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n            \n        </div>\n    )\n}\n\nexport default Row\n \n ","import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport requests from './requests';\n\nfunction Banner() {\nconst [movie, setmovie] = useState([]);\n\nuseEffect(() => {\n\n    async function fetchData() {\n        const request = await axios.get(requests.fetchNetflixOriginals);\n        setmovie(request.data.results[Math.floor(Math.random() * request.data.results.length)]);\n        return request;\n    }\n    fetchData();\n    }, [])\n\n    console.log(movie);\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n      }\n    \n\n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original${movie?.backdrop_path}\")`,\n                backdropPosition: \"center center\",\n              }}>\n\n\n                    <div className=\"banner_content\">\n                       <h1 className=\"banner_title\">\n                            {movie?.title || movie?.name || movie?.original_name}\n                        </h1>\n\n\n                        <div>\n                            <button className=\"banner_button\">Play</button>\n                            <button className=\"banner_button\">My List</button>\n                        </div>\n                            <h1 className=\"banner_discription\">\n                          {truncate(movie?.overview, 150)}\n                            </h1>\n\n                        </div>\n                        <div className=\"banner_fadeBottom\" />   \n                 \n\n           \n        </header>\n    );\n}\n\nexport default Banner;\n","import React, { useEffect, useState} from 'react'\nimport \"./Nav.css\";\n\nfunction Nav() {\n    const [show, handleShow] = useState(false);\n    useEffect(() => {\n        window.addEventListener(\"scroll\", () => {\n        if (window.scrollY > 100) {\n        handleShow(true);\n        } else {\n        handleShow(false);\n        }\n        });\n        return () => {\n        window.removeEventListener(\"scroll\");\n         };\n        }, []);\n\n\n\n\n    return (\n        \n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img className=\"nav_logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\" alt=\"Netflix LOGO\">\n\n            </img>\n\n            <img\n            className=\"nav_avatar\"\n            src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\n            alt=\"Avatar\"\n            />\n            \n        </div>\n    )\n}\n\nexport default Nav\n","\nimport './App.css';\nimport requests from './requests';\nimport Row from './Row';\nimport './Row.css';\nimport Banner from './Banner';\nimport './Banner.css';\nimport Nav from './Nav';\nimport './Nav.css';\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav/>\n      <Banner />\n      \n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}